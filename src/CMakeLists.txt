# src/remmina - The GTK+ Remote Desktop Client
#
# Copyright (C) 2011 Marc-Andre Moreau
# Copyright (C) 2014-2015 Antenore Gatta, Fabio Castelli, Giovanni Panozzo
# Copyright (C) 2016-2022 Antenore Gatta, Giovanni Panozzo
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
# Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# In addition, as a special exception, the copyright holders give permission to
# link the code of portions of this program with the OpenSSL library under
# certain conditions as described in each individual source file, and distribute
# linked combinations including the two. You must obey the GNU General Public
# License in all respects for all of the code used other than OpenSSL. If you
# modify file(s) with this exception, you may extend this exception to your
# version of the file(s), but you are not obligated to do so. If you do not wish
# to do so, delete this exception statement from your version. If you delete
# this exception statement from all source files in the program, then also
# delete it here.

list(
  APPEND
  REMMINA_SRCS
  "remmina_about.cpp"
  "remmina_about.hpp"
  "remmina_applet_menu.cpp"
  "remmina_applet_menu.hpp"
  "remmina_applet_menu_item.cpp"
  "remmina_applet_menu_item.hpp"
  "remmina_avahi.cpp"
  "remmina_avahi.hpp"
  "remmina.cpp"
  "remmina.hpp"
  "remmina_chat_window.cpp"
  "remmina_chat_window.hpp"
  "remmina_crypt.cpp"
  "remmina_crypt.hpp"
  "remmina_exec.cpp"
  "remmina_exec.hpp"
  "remmina_file.cpp"
  "remmina_file_editor.cpp"
  "remmina_file_editor.hpp"
  "remmina_file.hpp"
  "remmina_file_manager.cpp"
  "remmina_file_manager.hpp"
  "remmina_ftp_client.cpp"
  "remmina_ftp_client.hpp"
  "remmina_icon.cpp"
  "remmina_icon.hpp"
  "remmina_key_chooser.cpp"
  "remmina_key_chooser.hpp"
  "remmina_log.cpp"
  "remmina_log.hpp"
  "remmina_main.cpp"
  "remmina_main.hpp"
  "remmina_monitor.cpp"
  "remmina_monitor.hpp"
  "remmina_marshals.cpp"
  "remmina_marshals.hpp"
  "remmina_marshals.list"
  "remmina_masterthread_exec.cpp"
  "remmina_masterthread_exec.hpp"
  "remmina_message_panel.cpp"
  "remmina_message_panel.hpp"
  "remmina_plugin_manager.cpp"
  "remmina_plugin_manager.hpp"
  "remmina_plugin_native.cpp"
  "remmina_plugin_native.hpp"
  "remmina_ext_exec.cpp"
  "remmina_ext_exec.hpp"
  "remmina_pref.cpp"
  "remmina_pref_dialog.cpp"
  "remmina_pref_dialog.hpp"
  "remmina_pref.hpp"
  "remmina_protocol_widget.cpp"
  "remmina_protocol_widget.hpp"
  "remmina_public.cpp"
  "remmina_public.hpp"
  "remmina_scrolled_viewport.cpp"
  "remmina_scrolled_viewport.hpp"
  "remmina_sftp_client.cpp"
  "remmina_sftp_client.hpp"
  "remmina_sftp_plugin.cpp"
  "remmina_sftp_plugin.hpp"
  "remmina_sodium.cpp"
  "remmina_sodium.hpp"
  "remmina_ssh.cpp"
  "remmina_ssh.hpp"
  "remmina_ssh_plugin.cpp"
  "remmina_ssh_plugin.hpp"
  "remmina_string_array.cpp"
  "remmina_string_array.hpp"
  "remmina_string_list.cpp"
  "remmina_string_list.hpp"
  "remmina_unlock.cpp"
  "remmina_unlock.hpp"
  "remmina_utils.cpp"
  "remmina_utils.hpp"
  "remmina_widget_pool.cpp"
  "remmina_widget_pool.hpp"
  "remmina_external_tools.cpp"
  "remmina_external_tools.hpp"
  "remmina_sysinfo.hpp"
  "remmina_sysinfo.cpp"
  "rcw.cpp"
  "rcw.hpp"
  "rmnews.cpp"
  "rmnews.hpp"
  "remmina_mpchange.cpp"
  "remmina_mpchange.hpp"
  "remmina_scheduler.cpp"
  "remmina_scheduler.hpp"
  "remmina_stats.cpp"
  "remmina_stats.hpp"
  "resources.c")

set(RESOURCE_LIST
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_about.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_key_chooser.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_main.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_mpc.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_news.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_preferences.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_search.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_search_popover.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_snap_info_dialog.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_spinner.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_string_list.glade
    ${CMAKE_CURRENT_SOURCE_DIR}/../data/ui/remmina_unlock.glade)

option(WITH_PYTHONLIBS "Enable Python plugins support" OFF)
if(WITH_PYTHONLIBS)
  message(STATUS "Python plugins support enabled")
  find_suggested_package(PythonLibs)
  if(PythonLibs_FOUND)
    message(STATUS "Python libs found, Python support enabled")
    add_definitions(-DWITH_PYTHONLIBS)
    list(FIND REMMINA_SRCS "remmina_exec.cpp" SRCINDEX)
    message(DEBUG "remmina_exec.cpp found at index: " ${SRCINDEX})
    # Index calculated at "remmina_exec.cpp" position (43 as of today)
    list(
      INSERT
      REMMINA_SRCS
      ${SRCINDEX}
      "remmina_plugin_python.cpp"
      "remmina_plugin_python.hpp"
      "remmina_plugin_python_module.cpp"
      "remmina_plugin_python_module.hpp"
      "remmina_plugin_python_remmina.cpp"
      "remmina_plugin_python_remmina.hpp"
      "remmina_plugin_python_protocol_widget.cpp"
      "remmina_plugin_python_protocol_widget.hpp"
      "remmina_plugin_python_remmina_file.cpp"
      "remmina_plugin_python_remmina_file.hpp")
  else()
    message(STATUS "Python plugins support enabled, but Python libs not found")
  endif()
else()
  message(STATUS "Python plugins support disabled")
endif()

message(DEBUG "Source list set to: " ${REMMINA_SRCS})

compile_gresources(
  RESOURCE_FILE
  XML_OUT
  TYPE
  EMBED_C
  PREFIX
  /org/remmina/Remmina/src
  SOURCE_DIR
  ${CMAKE_CURRENT_SOURCE_DIR}
  RESOURCES
  ${RESOURCE_LIST})

add_custom_target(resource DEPENDS ${RESOURCE_FILE})
add_executable(remmina ${REMMINA_SRCS} ${RESOURCE_FILE})
add_dependencies(remmina resource)
target_link_libraries(remmina ${GTK_LIBRARIES} -rdynamic)

if(WITH_PYTHONLIBS)
  if(PythonLibs_FOUND)
    include_directories(${PYTHON_INCLUDE_DIRS})
    target_link_libraries(remmina ${PYTHON_LIBRARIES})
  endif()
endif()

if(WITH_MANPAGES)
  install(FILES remmina.1 DESTINATION ${CMAKE_INSTALL_FULL_MANDIR}/man1)
endif()

find_package(X11)
include_directories(${X11_INCLUDE_DIR})
target_link_libraries(remmina ${X11_LIBRARIES})

target_link_libraries(remmina ${CMAKE_THREAD_LIBS_INIT})

if(Intl_FOUND)
  message(STATUS "${CMAKE_SYSTEM_NAME} detected, building with Intl")
  include_directories(${Intl_INCLUDE_DIRS})
  target_link_libraries(remmina ${Intl_LIBRARIES})
endif()

find_suggested_package(LIBSSH)
if(LIBSSH_FOUND)
  add_definitions(-DHAVE_LIBSSH)
  include_directories(${LIBSSH_INCLUDE_DIRS})
  target_link_libraries(remmina ${LIBSSH_LIBRARIES})
endif()

if(GCRYPT_FOUND)
  include_directories(${GCRYPT_INCLUDE_DIRS})
  target_link_libraries(remmina ${GCRYPT_LIBRARIES})
endif()

if(AVAHI_FOUND)
  include_directories(${AVAHI_INCLUDE_DIRS})
  target_link_libraries(remmina ${AVAHI_LIBRARIES})
endif()

if(OPENSSL_FOUND)
  include_directories(${OPENSSL_INCLUDE_DIRS})
  target_link_libraries(remmina ${OPENSSL_LIBRARIES})
endif()

option(WITH_VTE "Build with support for VTE" ON)
if(GTK3_FOUND AND WITH_VTE)
  set(_VTE_VERSION_NUMS 2.91 2.90)
  foreach(__VTE_VERSION ${_VTE_VERSION_NUMS})
    set(_VTE_VERSION_NUM ${__VTE_VERSION})
    find_suggested_package(VTE)
    if(VTE_FOUND)
      break()
    endif()
    message(STATUS "VTE ${__VTE_VERSION} not found")
  endforeach()
elseif(WITH_VTE)
  set(_VTE_VERSION_NUM)
  find_package(VTE)
endif()

if(VTE_FOUND)
  add_definitions(-DHAVE_LIBVTE)
  include_directories(${VTE_INCLUDE_DIRS})
  target_link_libraries(remmina ${VTE_LIBRARIES})
endif()

if(sodium_FOUND)
  message(STATUS "Sodium found")
  message(STATUS "Sodium include dirs ${sodium_INCLUDE_DIR}")
  include_directories(${sodium_INCLUDE_DIR})
  target_link_libraries(remmina sodium)
endif()

option(HAVE_LIBAPPINDICATOR "Build with support for status icon. Appindicator is required" ON)
if(GTK3_FOUND)
    if(HAVE_LIBAPPINDICATOR)
        find_required_package(APPINDICATOR)
        if(APPINDICATOR_FOUND)
            add_definitions(-DHAVE_LIBAPPINDICATOR)
            include_directories(${APPINDICATOR_INCLUDE_DIRS})
            target_link_libraries(remmina ${APPINDICATOR_LIBRARIES})
            message(STATUS "AppIndicator library dirs ${APPINDICATOR_LIBRARIES}")
            message(STATUS "AppIndicator include dirs ${APPINDICATOR_INCLUDE_DIRS}")
        else()
            message(FATAL_ERROR "AppIndicator not found")
        endif()
    endif()
  find_required_package(JSONGLIB)
  if(JSONGLIB_FOUND)
    include_directories(${JSONGLIB_INCLUDE_DIRS})
    target_link_libraries(remmina ${JSONGLIB_LIBRARIES})
  else()
    message(FATAL_ERROR "json-glib library not found")
  endif()
  find_required_package(LIBSOUP24)
  if(LIBSOUP24_FOUND)
    include_directories(${LIBSOUP24_INCLUDE_DIRS})
    target_link_libraries(remmina ${LIBSOUP24_LIBRARIES})
  else()
    message(FATAL_ERROR "libsoup 2.4 library not found")
  endif()
endif()

include(FindPCRE2)
if(NOT PCRE2_FOUND)
  message(FATAL_ERROR "libpcre2 library not found")
endif()
include_directories(${PCRE2_INCLUDE_DIRS})

add_subdirectory(external_tools)

install(TARGETS remmina DESTINATION ${CMAKE_INSTALL_BINDIR})
install(
  DIRECTORY include/remmina/
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/remmina
  FILES_MATCHING
  PATTERN "*.hpp")
